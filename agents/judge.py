# Judge can compare summaries generated by system with the one fetched from API.
import random

from spade.behaviour import CyclicBehaviour
from spade.message import Message
from spade.template import Template

from agents.improved_agent import ImprovedAgent
from system import global_strings


class JudgementSession:
    def __init__(self, summarizers_n):
        self.summarizers_n = summarizers_n
        self.summaries = {}

    def feed(self, jid, content):
        self.summaries[jid] = content

    def is_ready_to_go(self):
        return len(self.summaries) == self.summarizers_n

    def pick_best(self):
        return ('all', '---\n'.join(["Author: {}\n\n{}".format(k, v) for k,v in self.summaries.items()]))
        return random.choice(list(self.summaries.items()))


class JudgeAgent(ImprovedAgent):
    class RegisterBehav(CyclicBehaviour):
        async def run(self):
            msg = await self.receive(10)
            if msg:
                summarizers_n = int(msg.get_metadata('summarizers'))
                self.agent.sessions[msg.get_metadata('uuid')] = JudgementSession(summarizers_n)

    class ReceiveBehav(CyclicBehaviour):
        async def run(self):
            self.agent.logger.info("alive")
            msg = await self.receive(10)
            if msg:
                request_uuid = msg.get_metadata('uuid')
                jid = str(msg.sender.bare())
                content = msg.body
                self.agent.sessions[request_uuid].feed(jid, content)

                if self.agent.sessions[request_uuid].is_ready_to_go():
                    jid, content = self.agent.sessions[request_uuid].pick_best()

                    m = Message(to="chatbot@mokki.org")
                    m.set_metadata('ontology', global_strings.ONTOLOGY_JUDGE_CHATBOT)
                    m.set_metadata('uuid', request_uuid)
                    m.body = "Author: {}\n\n{}".format(jid, content)
                    await self.send(m)

                    del self.agent.sessions[request_uuid]

    async def setup(self):
        b = self.RegisterBehav()
        t = Template()
        t.set_metadata('ontology', global_strings.ONTOLOGY_DISPATCHER_JUDGE)
        self.add_behaviour(b, t)

        b = self.ReceiveBehav()
        t = Template()
        t.set_metadata('ontology', global_strings.ONTOLOGY_SUMMARIZER_JUDGE)
        self.add_behaviour(b, t)

    def __init__(self, *args, **kwargs):
        self.sessions = {}
        super().__init__(*args, **kwargs)
