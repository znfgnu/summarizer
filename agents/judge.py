# Judge can compare summaries generated by system with the one fetched from API.
import datetime
import random

from spade.behaviour import CyclicBehaviour, TimeoutBehaviour, OneShotBehaviour
from spade.message import Message
from spade.template import Template

from agents.improved_agent import ImprovedAgent
from system import global_strings


class JudgementSession:
    def __init__(self, summarizers_n, timeout):
        self.summarizers_n = summarizers_n
        self.summaries = {}
        self.endtime = datetime.datetime.now() + datetime.timedelta(seconds=timeout)

    def feed(self, jid, content):
        self.summaries[jid] = content

    def is_ready_to_go(self):
        return len(self.summaries) == self.summarizers_n

    def is_timed_out(self):
        return datetime.datetime.now() > self.endtime

    def pick_best(self):
        return ('all', '---\n'.join([
            "\nAuthor: {} ({} chars)\n\n{}".format(k, len(v), v)
            for k, v in list(sorted(self.summaries.items(), key=lambda x: len(x[1])))
        ]))


class JudgeAgent(ImprovedAgent):
    class RegisterBehav(CyclicBehaviour):
        async def run(self):
            msg = await self.receive(10)
            if msg:
                summarizers_n = int(msg.get_metadata('summarizers'))
                timeout = int(msg.get_metadata('timeout'))
                self.agent.sessions[msg.get_metadata('uuid')] = JudgementSession(summarizers_n, timeout)

    class ReceiveBehav(CyclicBehaviour):
        async def run(self):
            self.agent.logger.info("alive")
            msg = await self.receive(1)
            if msg:
                request_uuid = msg.get_metadata('uuid')
                jid = str(msg.sender.bare())
                content = msg.body
                if request_uuid in self.agent.sessions:
                    self.agent.sessions[request_uuid].feed(jid, content)

            to_remove = []
            for uuid, js in self.agent.sessions.items():
                if js.is_timed_out() or js.is_ready_to_go():
                    jid, content = self.agent.sessions[uuid].pick_best()

                    m = Message(to="chatbot@mokki.org")
                    m.set_metadata('ontology', global_strings.ONTOLOGY_JUDGE_CHATBOT)
                    m.set_metadata('uuid', uuid)
                    m.body = "Author: {}\n\n{}".format(jid, content)
                    await self.send(m)

                    to_remove.append(uuid)

            for uuid in to_remove:
                del self.agent.sessions[uuid]

    async def setup(self):
        b = self.RegisterBehav()
        t = Template()
        t.set_metadata('ontology', global_strings.ONTOLOGY_DISPATCHER_JUDGE)
        self.add_behaviour(b, t)

        b = self.ReceiveBehav()
        t = Template()
        t.set_metadata('ontology', global_strings.ONTOLOGY_SUMMARIZER_JUDGE)
        self.add_behaviour(b, t)

    def __init__(self, *args, **kwargs):
        self.sessions = {}
        super().__init__(*args, **kwargs)
